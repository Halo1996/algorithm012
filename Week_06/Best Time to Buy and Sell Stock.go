package main
//121. 买卖股票的最佳时机
//给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
//
//如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
//
//注意：你不能在买入股票前卖出股票。
//
//
//
//示例 1:
//
//输入: [7,1,5,3,6,4]
//输出: 5
//解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
//     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
// 买卖股票的最佳时机
// 思路: 有两种操作 买/卖 最优化买:对比 上一次买与这次买 选择最省钱的方式
// 最优化卖:对比 上次卖与这次卖 选择最赚钱的方式 4ms/3.6mb
func maxProfit(prices []int) int {
	// 0 = 持有股票
	// 1 = 不持有股票
	n := len(prices)
	if n == 0 {
		return 0
	}

	f := make([][2]int, n)
	f[0][0] = -prices[0]
	for i:=1 ; i < n ; i++{
		// 这个时候购入
		f[i][0] = max(f[i-1][0],-prices[i])
		// 这个时候卖出
		f[i][1] = max(f[i-1][0]+prices[i],f[i-1][1])
	}
	return f[n-1][1]
}
//func max(x, y int) int {
//	if x > y {
//		return x
//	}
//	//fmt.Println(x, y)
//	return y
//}

func main() {
	
}
